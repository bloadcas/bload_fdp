algorithm minimum
(* author:
   description: 
*)   
    
const
    MAX_AVAILABILITY: integer = 100;
endconst

type
    tAvailability = record
        person : tPerson;
        start : tDate;
        end : tDate;
    endrecord
    tAvailabilityData = record
        elems : vector [MAX_AVAILABILITY] of tAvailability;
        count : integer;
    endrecord
endtype

function checkHasAvailability (availabilities: tAvailabilityData, document: string) : boolean
var
    left, right, middle : integer;
    found : boolean;
endvar

    { Initialize variables }
    left := 1;
    right := availabilities.count;
    found := false;
    { Loop using binary search }
    while (left â‰¤ right) and not found do
        middle := (left + right) div 2;
        if availabilities.elems[middle].person.document = document then
            found := true;
        else
            if availabilities.elems[middle].person.document < document then
                left := middle + 1;
            else
                right := middle -1;
            endif
        endif
    endwhile
    
    for left := 1 to right  do 
        middle := readInteger();
        writeInteger(middle);
    endfor
    
    return found;
endfunction

endalgorithm




algorithm sumNElements
(* author: joagso@bloadcas.com
   date: 2023-01-26
   description: Sum N elements which are in a range [0..N]
*)

type
endtype

var
    i, N, total: integer;
endvar

    i := 0;
    N := readInteger();
    total := 0;
    while( i <= N ) do
        total := total + i;
        i := i + 1;
    endwhile
    writeInteger(total);
    
    
    N := readInteger();
    total := 0;
    for i := 0; to N do
        total := total + i;
    endfor
    writeInteger(total);
    
endalgorithm;



algorithm factorial
(* author: joagso@bloadcas.com
   date: 2023-01-26
   description: Calculate the factorial of x by iteration.
*)

type
endtype

var
    i, N, total: integer;
endvar

    i := 1;
    N := readInteger();
    total := 1;
    while( i <= N ) do
        total := total * i;
        i := i + 1;
    endwhile
    writeInteger(total);
    
    
    N := readInteger();
    total := 1;
    for i := 1 to N do
        total := total * i;
    endfor
    writeInteger(total);
    
endalgorithm;

