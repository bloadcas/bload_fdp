GUIÓ DEL INITIATION TO PROGRAMMING

01. SIMPLE

1.- INTRODUCCIÓ
    Transpa:    SIMPLE
                * DATA TYPES
                * VARIABLES: declaration, assign & use 
                * INOUT (IO)
    
    Benvinguts, en aquest tutorial explicarem els tipus de dades més bàsics que són acceptats en algorísmica.
    Com es declaren, com s'assignen i com s'usen les variables que contindran les dades les quals corresponen a algun dels tipus anteriors.
    Finalment, veurem com un algorisme pot demanar dades per l'entrada, en el nostre cas pel teclat, i com pot emetre resultats per pantalla.
    
2.- ESTRUCTURA BÀSICA D'UN ALGORISME.
    
    Transpa:        algorithm <NAME>
                    (* author: <author>
                       date: <yyyy-mm-dd>
                       description: <brief description>
                    *)
                    types
                        <types>         { type of data which are going to be used as a variables }
                    endtypes
                    
                        var 
                            <vars>      { variables to be used inside de code }
                        endvars
                    
                        { comments }
                        <code>
                        
                        /* C comments style */
                    
                    endalgorithm
    
    Per començar el nostre algorisme s'expresa dins d'una estructura que ens facilitarà la seva expressió formal. 
    També se solen representar com a procediments en format acció o funció tal com ho veurem més endavant.
    Però en aquest cas us mostrem el format complet d'un algorisme.
    
    Dins del codi hi trobarem paraules clau (TOKENS) tals com algorithm, types, endalgorithm, etc. 
    Aquestes paraules identifiquen parts del codi i son invariables.
    Les altres parts ja son pròpies del nostre codi o comentaris que hi inserim dins per fer-lo més entenible.
    Els comentaris en pseudocodi se solen representar entre claus del tipus brackets { }, 
    ... però com a símbol nostàlgic, en aquest curs, també es podrà posar entre els marcadors parèntesi-asterisc (* *). al pur estil PASCAL o MODULA-2.

    Ja per arrodonir-ho, també s'acceptarà la notació C.
    
3.- VARIABLES I CONSTANTS

    Transpa:        var                                         var 
                        name_var: type_of_data;                     count : integer;
                    endvar                                      endvar
                    
                    name_var := literal;                        count := 1;
                    name_var := name_var + literal;             count := count + 2;
                    name_var := 2 * name_var;                   count := 2 * count;

    Un cop ja sabem on posar cada element, mostrarem com establir una variable.
    Segons el nostre model de computació, una variable és una dada registrada en la memòria la qual podrà ser usada dins del nostre codi. 
    Podrem assignar-li valors fixos (o literals) tal com assignar a count el valor 1 i poden canviar en tot moment del programa.
    Per fer-ho caldrà usar l'operador ASSIGNACIÓ. És un operador molt usat i en pseudocodi s'usa la nomenclatura :=.
    I en aquest cas, es diu que "s'assigna el valor 1 a la variable count". 
    També podrem usar expressions com suma, resta, multiplicació, divisió, etc...
    Per tant, també podem usar el valor que hi ha emmagatzemada en una altra variable i operar amb elles per acabar assignant el resultat a la variable que ens interessi.
    Per exemple, "count se li assigna el valor que ja tenia incrementat en dues unitats" o "count se li assigna el doble del valor que ja tenia".

    
    Transpa:        const                                       const
                        <name>: <type> = <literal>;                 PI : real = 3.1415;
                    endvar                                      endconst
                    
    Anteriorment, hem dit que una variable se li pot assignar valors literals que són valors fixes o constants.
    Però, si aquest literal és un valor fix conegut o que un cop establert no canviarà, podem declarar constants.
    Les constants es consideren valors invariables durant l'execució de l'algorisme. Per exemple, el valor PI valdrà 3.1415 durant tot el programa i no variarà.
    Si en el nostre algorisme necesitem indicar una valors màxims o mínims, podem usar una constant establint el valor màxim. 
    Si en algun moment es determina que aquest valor ha de ser un altre, el podríem canviar, però mai per codi! En les constants, no es poden usar l'operador assignació.
    

    Vegem quins tipus de dades podem assignar a una variable per començar a escriure codi.
    
4.- DATATYPES
    Transpa:    * NUMERICAL: integer, real
                * LOGICAL: boolean
                * CARACTERS: character (char), string
                
    Hi ha tres tipus de dades bàsiques en l'algorísmica: els numerìcs, els lògics i els caràcters.
    
    Transpa:    * NUMERICAL: integer
                    Possible values:    -n ... 0 ... +n
                    Operations:  (-)        sign change
                                 + -        adding substract
                                 * div mod
                    Comparacions:   =, !=, <, <=, >, >=
                    Literals: -14, -4, 0, 3, 5, 7, ....
                    
                    Invalid operations:   a / b    like b as 0 ... It throws and error!!
                    Example:        var x : integer;  endvar
                                    x := 1024;
                                    x := x div 2.0;     { result x = 512 }
                    
                    
    En el cas dels numèrics, hi trobarem els enters els quals engloben els negatius, els naturals i el zero.
    
    Les operacions que poden fer-se són el canvi de signe, les operacions de suma, resta, multiplicació i divisió entera.
    
    Si necessiteu refrescar els termes matemàtics aplicats a la informàtica, teniu disponible un video introductori
    on s'hi expliquen aquests termes.
    
    El que s'ha de tenir ben en compte és que en una divisió el demonimador mai ha de ser zero. 
    La divisió per zero no existeix! (i obviament no és infinit el qual ni és un nombre). 
    
    Transpa:    * NUMERICAL: real
                    Possible values:    R  tq   mantisa · 10^e
                    Operations:  (-)        sign change
                                 + -        adding substract
                                 * / %
                    Comparacions:   =, !=, <, <=, >, >=
                    Literals: -3.1416, -14, -4, -0.2222, 0, 0.0111, 3, 2.06, 5, 7, ....
                                        
                    Invalid operations:              a / b    like b as 0 ... It throws and error!!
                    Be carefull with comparison:     a - b (0.09999966 - 0.01) is not zero but almost!
                                                     |a-b| < epsilon.
                                                     
                    Example:        var x : real;  endvar
                                    x := 3.141516;
                                    x := x * 2.0;       { result x = 6,283032 }


    En el cas dels reals, engloben tots els nombres que no siguin complexos i expressat en notació científica.
    Això significa que hi haurà una part real i una precisió com a   mantisa x 10^exp
    
    Les operacions que poden fer-se son el canvi de signe, les operacions de suma, resta, multiplicació i divisió.
    
    L'únic que s'ha de tenir en compte és que tampoc es pot dividir per un valor 0 (però sí un d'aproximat)
    I que si volem comparar amb dos reals haurem de vigilar perquè valors molt propers poden representar el mateix valor.
    
    En les llibreries matemàtiques dels llenguatges de programació generalment trobarem aquestes funcions externes:
    
        abs(x), sin(x), cos(x), tan(x), sqrt(x), exp(x), log(x), pow(x,y), ceil(x), floor(x)
        max(x,y), min(x,y), round(x)


    Transpa:    * LOGICAL: boolean (or bool)
                    Possible values (Literals):    true , false
                    Operations:  not x        negate
                                 x and y      conjuntion
                                 x or y       disjuntion
                    Examples: 
                        not true = false
                        not false = true
                        
                        true and true = true        x and true = x
                        
                        false or true = true        x or true = true
                        true or false = true
                        true or true = true
                        
                    Example:        var x : bool; y: bool;  endvar
                                    y := true;
                                    x := y and false;       { result x = false }

                        
    En el cas de les dades lògiques podem expressar dos estats, el cert (true) o false (false) 
    ... i pot treballar amb tres operacions bàsiques negada (not), la conjunció i (and) i la disjunció (or)
    
    Les taules de la veritat són les que mostrem a continuació i si us cal un repàs, teniu disponible un video introductori
    on s'hi expliquen aquests termes.
    
    Només recordaré que la negada troba l'expressió contraria a la que s'avalua, si és cert, fals i si és fals, cert.
    La conjunció només és certa quan els dos operands són certs, altrament tot és fals.
    La disjunció, en canvi, es fa certa si un dels dos operands ho és. Altrament s'avalua com fals.
    
    La regla nemotècnica que us pot ajudar a dominar aquestes expressions són que un operador and ...
    
    
    Transpa:    * CARACTERS: character 
                    Possible values:    ASCII o ANSI expressats amb l'apostrof simple:   <'>
                    Operations:         -
                    Comparacions:   =, !=, <, <=, >, >=      (segons el codi associat)
                                                             non-english letters, would be unordered alphabetical.
                            1) nombres
                            2) majúscules
                            3) minúscules
                            
                    Example:        var x : char  endvar
                                    x := 'h';

                    Casos importants: usarem les expressions usals en notació C.
                        '\r','\n' -->      \r\n windows    \n linux    \r unix
                        '\t'  tabulació
                        '\0'  null
                        '\\'  la barra invertida
                        '(b)' l'espai bbarra

    En el cas dels caràcter s'usa la codifiació ASCII en les que s'assigna un nombre a cada caràcter d'un alfabet internacional.
    L'ordre establert és: primer els caràcters de control, després els nombres, seguit de les lletres majúscules i, finalment, les minúscules.
    Compte amb els símbols llatins que no s'inclouen dins d'aquest alfabet. La ç i l'ñ es troben en posicions diferents fóra del rang.
    
    Transpa:    * CARACTERS: string
                    Possible values:    cadenes ASCII o ANSI expressats amb l'apostrof doble: <"> i acabats en \0.
                    Operations:     
                    Comparacions:       =, !=, <, <=, >, >=      (segons el codi associat)
                                                             non-english letters, would be unordered alphabetical.
                            1) nombres
                            2) majúscules
                            3) minúscules
                            
                    Example:        var x : string  endvar
                                    x := "hello world!";

    Finalment, el cas de les cadenes o strings ens permetrà registrar paraules o frases dins de les variables. 
    No té cap operació associada, però sí que es pot utilizar operadors de comparació per veure si dos strings son iguals o no.
    Els literals van associats com entre cometes dobles:
    
5.- CONVERSIONS ENTRE DADES

    Transpa:                integer         real                boolean             char                string 
                integer     --------------  i:=realToInt(r)     i := kronecker(b);  i := charToInt(c)   xxxxxxxxxxxxxx
                real        r:=intToReal(r) --------------      r := intToReal(kr(i)) r:=iTor(cToI(c))  xxxxxxxxxxxxxx
                boolean     b:=i!=0;        b:=rToi(r)!=0;      --------------
                char                                                                --------------
                string                                                                                  --------------
 
    Per poder passar d'un tipus a un altre, podem fer servir aquestes expressions. 
    En alguns pseudocodis es permet la conversió "automàtica", entre operadors:  r: real;     r := 1.0 * i;
                                                                                              r := 1.0 * intToReal(i);

 
5.- ENTRADES I SORTIDES

    Transpa:        var                    var                var                   var               var 
                        x: integer;             x: real;          x: boolean;           x: char           x: string; 
                    endvar                 endvar             endvar                endvar            endvar 
                                                                                                      
                    x := readInteger();    x := readReal();   x := readBoolean();   x := readChar();  x := readString();
                    writeInteger(x);       writeReal(x);      writeBoolean(x);      writeChar(x);     writeString(x);
    
    Per poder entrar valors des del teclat usarem el procediment readInteger, readReal, readBoolean, readChar i readString.
    En canvi, per poder escriure per pantalla haurem d'usar writeInteger, writeReal, writeBoolean, writeChar i writeString.
    
    
6.- PRIMERS PROGRAMES:

    * Calcula la teva edat: 
        Transpa:    Calculates the age of a person based on the current year and the date of birth.
                    Assume that the year of birth are always less or equal than the current year.
        
        Escriure:   algorithm CurrentAge
                    (* author: lsic@bloadcas.com
                       date: 2023-02-02
                       description: Calculates the age of a person based on the current year and the date of birth
                    *)
                    
                    { This algorithm uses the simple data types and no need to declare its own }
                    
                        var 
                            year_current : integer;
                            year_birth : integer;
                            age : integer;
                        endvar
                    
                        { get the current and birthday from the input }
                        year_current := readInteger();
                        year_birth := readInteger();
                        
                        (* P: the current year and birthday has values ^ BIRTH <= CURRENT *)
                        { year_current = CURRENT ^ year_birth = BIRTH  ^ BIRTH <= CURRENT }
                        age := year_current - year_birth;
                        { Q: age = CURRENT - BIRTH  ^ BIRTH <= CURRENT }
                        
                        { Print the age. }
                        writeInteger(age);   

                        { The age between the two years has been printed. }
                        
                    endalgorithm
    
        - Començarem per escriure la capçalera de algorithm, endalgorithm (+intro) i
          la descripció del programa on s'inclou l'autor, la data i el que fa.
          
        - Com que haurem de calcular l'edat entre dues dades, el primer que haurem de fer és 
          que algú ens les proporcioni. Qui? L'úsuari les escriurà pel teclat i les haurem de recollir.
          Per fer-ho, les haurem de guardar en una variable entera. 
          Per tant, necessitem year_current i year_birth per guardar-les.
          
        - Primer les declarem dins de la zona de variables. Creem aquesta zona (var -- endvar)
          I escrivim dues variables enteres. 
          La variable year_current del tipus integer.
          La variable year_birth del tipus integer.
          
        - Un cop sabem on guardarem les dades, comencem amb l'algorisme.
          Haurem de recollir els anys amb els readInteger() perquè les variables són enteres.
          
        - En aquest punt què sabem? que les variables han estat inicialitzades amb valors que no coneixem,
          però que existeixen. Per ara ho indicarem així.
          A més, indicarem que les dades són correctes i, per tant, el valor que ens han passat de BIRTH 
          (ho posem així en majúscula) és inferior o igual a l'actual, CURRENT.
          
        - Sabem que tenim les dades inicialitzades, però ens falta calcular l'edat fent la simple resta   
          d'anys.
          Això ho guardarem a una variable age que haurem de declarar. 
          Dins de la zona de variables var, declarem la variable age del tipus integer.
          Com que assumim que l'entrada serà correcta i no ens generarà negatius, ens estalviem fer cap comprovació. 
          És a dir, una precondició previa a executar-se que es respecta. 
          Per tant, realitzem la resta i l'assignem a age.
          
        - Finalment, quan ja tenim l'edat, només ens cal emetre-la per pantalla amb un writeInteger.
          Per formalitat, haurem d'escriure què ha passat: s'ha impres l'edat, que és una resta i 
          que els valors han estat correctes.
          
    
    * Calcula la taula de multiplicació: 
        Transpa:    Create the simple table of multiplication from a desired value.
        
        Escriure:   algorithm MultiplyTable
                    (* author: lsic@bloadcas.com
                       date: 2023-02-02
                       description:  Create the simple table of multiplication from a desired value.
                    *)
                   
                        var 
                            value : integer;
                        endvar
                    
                        { get the integer value the input }
                        value := readInteger();
                        
                        (* value = VALUE *)
                        { write all the multiplications to the output }
                        writeInteger( 1 * value );
                        writeInteger( 2 * value );
                        writeInteger( 3 * value );
                        writeInteger( 4 * value );
                        writeInteger( 5 * value );
                        writeInteger( 6 * value );
                        writeInteger( 7 * value );
                        writeInteger( 8 * value );
                        writeInteger( 9 * value );
                        writeInteger( 10 * value );
                        
                        { Q: The table of multiplication for the VALUE is printed }
                        
                    endalgorithm
                    
        - Començarem per escriure la capçalera de algorithm, endalgorithm (+intro) i
          la descripció del programa on s'inclou l'autor, la data i el que fa.
          
        - Com que haurem de calcular la taula de multiplicar d'un nombre enter, primer l'haurem
          de demanar a l'usuari. Ho posarem a una variable value a la qual l'assignarem
          el valor que es llegeixi de l'entrada per part de l'usuari. ReadInteger().
          Com que value no ha estat declarada, l'haurem de declarar com a enter.
          Creem l'espai de variables var-endvar i hi afegim la variable value del tipus enter.
          Indiquem un comentari pel que aconseguim el valor enter de l'entrada.
          
        - Fins ara sabem que la variable value té un valor desconegut, però que existeix.
          Ho indiquem. Però que caldrà fer ara? Mostrar la taula de multiplicar d'aquest valor.
          Això significa que haurem de mostrar un rere l'altre (seqüencialment) la multiplicació
          de 1 per value, 2 per value, 3 per value, així fins a el 10.
          
        - En aquest cas no ens cal cap variable temporal, ho podem mostrar directament fent la 
          multiplicació.
          writeInteger(1*value);
          copiem i ho fem pels altres valors.
          
        - Finalment ja ho tenim. Formalment indiquem que hem fet. 
          Hem imprés la taula de multiplicar d'un valor inicialitzat previament.
          
        
    
    
    * Calcula la divisió entre dos nombres: 
        Transpa:    Calculate the division of two numbers. 
                    Assume they are non-zero positive numbers.
        
        Escriure:   algorithm DivisionOf2Numbers
                    (* author: lsic@bloadcas.com
                       date: 2023-02-02
                       description:  Calculate the division of two non-zero positive numbers. 
                    *)
                   
                        var 
                            x, y, division : real;
                        endvar
                    
                        { get the values from the input }
                        x := readReal();
                        y := readReal();
                        
                        { P: x = X ^ y = Y ^ x > 0 ^ y > 0 }
                        division := x / y;
                        { Q: division = x / y ^ division > 0 }
                        
                        { Print the result }
                        writeReal(division);
                        
                    endalgorithm
    
        - Aquest exercici sembla complicat, però no té res de l'altre món. Per això, es troba dins de l'immersió simple.
        
        - Començarem per escriure la capçalera de algorithm, endalgorithm (+intro) i
          la descripció del programa on s'inclou l'autor, la data i el que fa.
          
        - Com que haurem de calcular la divisió de dos nombres reals (en aquest cas no és enter),
          els hautrem de demanar previament.
          Ho indiquem amb un comentari i llegim de l'entrada amb el readReal tant l'x com l'y.
          Com que no les hem declarat previament, haurem de crear la zona de variables var--endvar
          i afegirem les dues variables, x i y, del tipus real.
          
        - En aquest punt què sabem? Que X i Y tenen un valor. Ho representarem així. 
          x = X (MAJUSCULA) i y = Y (MAJÚSCULA). I, a més, des de l'enunciat ens diuen que seran més grans que zero.
          And x > 0 i y > 0.
          
        - Ara cal fer l'acció del programa, la divisió. 
          Usarem una variable division i li assignarem el resultat de l'operació x entre y (real).
          Com que no l'hem declarat previament, afegim division com a variable del tipus real.
          Per tant, un cop haguem fet la divisio, division será un valor positiu no-zero i contindrà el resultat d'aquesta operació.
          
        - Finalment, haurem de mostrar per pantalla el resultat que conté la variable division.
          
        
    
    * Calcula el volum d'una circumferència
        Transpa:    Calculate the volume of the pizza. 
                    Former, calculate the area of the pizza of radius Z:  A = Pi * z^2
                    Latterly, calculate the volume of this pizza times h: V = A * a = Pi * z^2 * a
        
        Escriure:   algorithm PizzaVolume
                    (* author: lsic@bloadcas.com
                       date: 2023-02-02
                       description:  Calculate the volume of the pizza or radius z and high a.
                    *)
                        const 
                            PI : real = 3.14159265359;
                        endconst
                        var 
                            a, z, area, volume : real;
                        endvar
                    
                        { get the value the radius and the hight }
                        a := readReal();
                        z := readReal();
                        
                        { P: a = A ^ z = Z }
                        area := PI * z * z;
                        volume := area * a;  (* the same as:  volume := Pi * z * z * a *)
                        { Q: area = Pi * z * z ^ volume = area * a }
                        
                        writeReal(volume);
                        { The volume of the pizza has been printed. }
                        
                    endalgorithm
    
        - En aquest exercici realitzarem càlculs matemàtics simples.
        
        - Començarem per escriure la capçalera de algorithm, endalgorithm (+intro) i
          la descripció del programa on s'inclou l'autor, la data i el que fa.
          
        - Primerament haurem de recollir els dos valors de l'entrada: el radi, z, i l'alçada, a.
          Com que són dos reals, ho farem amb un readReal.
          Les assignarem a les variables, a i z. 
          Com que no les hem declarat previament, haurem de crear la zona de variables var--endvar
          i afegirem les dues variables, a i z, del tipus real.
          
        - En aquest punt què sabem? Que a i z tenen un valor. Ho representarem així. 
          Ara, haurem de fer les multiplicacions per calcular el volum.
          Primer assignarem a area el valor de PI per z al quadrat qué és el mateix que multiplicar dos cops per z.
          Com que PI és una constant i no variarà, l'haurem de declarar com a tal.
          Creem la zona de constants const -- endconst i afegim la constant PI com a real amb el valor 3.14159265359;
          Un cop tenim l'area, caldrà trobar el volum. Assignem volum com el producte de l'area per l'alçada de la pizza, a.
          I ja tenim els càlculs fets, però com que usem dues variables que no hem declarat, ho haurem de fer.
          En la zona var--endvar, afegim les variables area i volume del tipus real.
          
        - Finalment, haurem de mostrar per pantalla el resultat que conté la variable volume amb writeReal.
    
    
    
    
    
    
    
    
    
    
    
    
    