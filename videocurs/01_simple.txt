GUIÓ DEL INITIATION TO PROGRAMMING

01. SIMPLE

1.- INTRODUCCIÓ
    Transpa:    SIMPLE
                * DATA TYPES
                * VARIABLES: declaration, assign & use 
                * INOUT (IO)
    
    Benvinguts, en aquest tutorial explicarem els tipus de dades més bàsics que són acceptats en algorísmica.
    Com es declaren, com s'assignen i com s'usen les variables que contindran les dades les quals corresponen a algun dels tipus anteriors.
    Finalment, veurem com un algorisme pot demanar una cada d'entrada i com pot emetre els càlculs per pantalla.
    
2.- ESTRUCTURA BÀSICA D'UN ALGORISME.
    
    Transpa:        algorithm <NAME>
                    (* author: <author>
                       date: <yyyy-mm-dd>
                       description: <brief description>
                    *)
                    types
                        <types>         { type of data which are going to be used as a variables }
                    endtypes
                    
                        var 
                            <vars>      { variables to be used inside de code }
                        endvars
                    
                        { comments }
                        <code>
                    
                    endalgorithm
    
    Per començar el nostre algorisme s'expresa dins d'una estructura que ens facilitarà la seva expressió formal. 
    També se solen representar com a procediments en format acció o funció. Però en aquest cas us mostrem el format complet.
    
    Dins del codi hi trobarem paraules clau (TOKENS) tals com algorithm, types, endalgorithm, etc. 
    Aquestes paraules identifiquen parts del codi i son invariables.
    Les altres parts ja son pròpies del nostre codi o comentaris que hi inserim dins per fer-lo més entenible.
    Els comentaris en pseudocodi se solen representar entre claus del tipus brackets { }, 
    ... però com a símbol nostàlgic, també es podrà posar entre els marcadors parèntesi-asterisc (* *).
    
3.- VARIABLES I CONSTANTS

    Transpa:        var                                         var 
                        name_var: type_of_data;                     count : integer;
                    endvar                                      endvar
                    
                    name_var := literal;                        count := 1;
                    name_var := name_var + literal;             count := count + 2;
                    name_var := 2 * name_var;                   count := 2 * count;

    Un cop ja sabem on posar cada element, mostrarem com establir una variable.
    Una variable és una dada registrada en la memòria la qual podrà ser usada dins del nostre codi. 
    Podrem assignar-li valors puntuals o literals tal com assignar a count el valor 1 i poden variar en 
    tot moment del programa.
    Per fer-ho caldrà usar l'operador ASSIGNACIÓ. És un operador molt usat i en pseudocodi s'usa la nomenclatura :=.
    I en aquest cas, es diu que "s'assigna el valor 1 a la variable count". 
    També podrem usar expressions com suma, resta, multiplicació, divisió, etc...

    Vegem quins tipus de dades podem assignar a una variable per començar a escriure codi.
    
    Transpa:        const                                       const
                        <name>: <type> = <literal>;                 PI : real = 3.1415;
                    endvar                                      endconst

    
4.- DATATYPES
    Transpa:    * NUMERICAL: integer, real
                * LOGICAL: boolean
                * CARACTERS: character (char), string
                
    Hi ha tres tipus de dades bàsiques en l'algorísmica: els numerìcs, els lògics i els caràcters.
    
    Transpa:    * NUMERICAL: integer
                    Possible values:    -n ... 0 ... +n
                    Operations:  (-)        sign change
                                 + -        adding substract
                                 * div mod
                    Comparacions:   =, !=, <, <=, >, >=
                    Examples: -14, -4, 0, 3, 5, 7, ....
                    
                    Invalid operations:   a / b    like b as 0 ... It throws and error!!
                    Example:        var x : integer;  endvar
                                    x := 1024;
                                    x := x div 2.0;     { result x = 512 }
                    
                    
    En el cas dels numèrics, hi trobarem els enters els quals engloben els negatius, els naturals i el zero.
    
    Les operacions que poden fer-se són el canvi de signe, les operacions de suma, resta, multiplicació i divisió entera.
    
    Si necessiteu refrescar els termes matemàtics aplicats a la informàtica, teniu disponible un video introductori
    on s'hi expliquen aquests termes.
    
    El que s'ha de tenir ben en compte és que en una divisió el demonimador mai ha de ser zero. 
    La divisió per zero no existeix! (i obviament no és infinit el qual ni és un nombre). 
    
    Transpa:    * NUMERICAL: real
                    Possible values:    R  tq   mantisa · 10^e
                    Operations:  (-)        sign change
                                 + -        adding substract
                                 * / %
                    Comparacions:   =, !=, <, <=, >, >=
                    Examples: -3.1416, -14, -4, -0.2222, 0, 0.0111, 3, 2.06, 5, 7, ....
                                        
                    Invalid operations:              a / b    like b as 0 ... It throws and error!!
                    Be carefull with comparison:     a - b (0.09999966 - 0.01) is not zero but almost!
                                                     |a-b| < epsilon.
                                                     
                    Example:        var x : real;  endvar
                                    x := 3.141516;
                                    x := x * 2.0;       { result x = 6,283032 }


    En el cas dels reals, engloben tots els nombres que no siguin complexos i expressat en notació científica.
    Això significa que hi haurà una part real i una precessió escrita com a   mantisa x 10^exp
    
    Les operacions que poden fer-se son el canvi de signe, les operacions de suma, resta, multiplicació i divisió.
    
    L'únic que s'ha de tenir en compte és que tampoc es pot dividir per un valor 0 (però sí un d'aproximat)
    I que si volem comparar amb dos reals haurem de vigilar perquè valors molt propers poden representar el mateix valor.
    
    En les llibreries matemàtiques dels llenguatges de programació generalment trobarem aquestes funcions externes:
    
        abs(x), sin(x), cos(x), tan(x), sqrt(x), exp(x), log(x), pow(x,y), ceil(x), floor(x)
        max(x,y), min(x,y), round(x)


    Transpa:    * LOGICAL: boolean (or bool)
                    Possible values:    true , false
                    Operations:  not x        negate
                                 x and y      conjuntion
                                 x or y       disjuntion
                    Examples: 
                        not true = false
                        not false = true
                        
                        true and true = true        x and true = x
                        
                        false or true = true        x or true = true
                        true or false = true
                        true or true = true
                        
                    Example:        var x : bool; y: bool;  endvar
                                    y := true;
                                    x := y and false;       { result x = false }

                        
    En el cas de les dades lògiques podem expressar dos estats, el cert (true) o false (false) 
    ... i pot treballar amb tres operacions bàsiques negada (not), la conjunció i (and) i la disjunció (or)
    
    Les taules de la veritat són les que mostrem a continuació i si us cal un repàs, teniu disponible un video introductori
    on s'hi expliquen aquests termes.
    
    Només recordaré que la negada troba l'expressió contraria a la que s'avalua, si és cert, fals i si és fals, cert.
    La conjunció només és certa quan els dos operands són certs, altrament tot és fals.
    La disjunció, en canvi, es fa certa si un dels dos operands ho és. Altrament s'avalua com fals.
    
    La regla nemotècnica que us pot ajudar a dominar aquestes expressions són que un operador and ...
    
    
    Transpa:    * CARACTERS: character 
                    Possible values:    ASCII o ANSI expressats amb l'apostrof simple:   <'>
                    Operations:         -
                    Comparacions:   =, !=, <, <=, >, >=      (segons el codi associat)
                                                             non-english letters, would be unordered alphabetical.
                            1) nombres
                            2) majúscules
                            3) minúscules
                            
                    Example:        var x : char  endvar
                                    x := 'h';

                    Casos importants: usarem les expressions usals en notació C.
                        '\r','\n' -->      \r\n windows    \n linux    \r unix
                        '\t'  tabulació
                        '\0'  null
                        '\\'  la barra invertida
                        '(b)' l'espai bbarra

    En el cas dels caràcter s'usa la codifiació ASCII en les que s'assigna un nombre a cada caràcter d'un alfabet internacional.
    L'ordre establert és: primer els caràcters de control, després els nombres, seguit de les lletres majúscules i, finalment, les minúscules.
    Compte amb els símbols llatins que no s'inclouen dins d'aquest alfabet. La ç i l'ñ es troben en posicions diferents fóra del rang.
    
    Transpa:    * CARACTERS: string
                    Possible values:    cadenes ASCII o ANSI expressats amb l'apostrof doble: <"> i acabats en \0.
                    Operations:     
                    Comparacions:       =, !=, <, <=, >, >=      (segons el codi associat)
                                                             non-english letters, would be unordered alphabetical.
                            1) nombres
                            2) majúscules
                            3) minúscules
                            
                    Example:        var x : string  endvar
                                    x := "hello world!";

    Finalment, el cas de les cadenes o strings ens permetrà registrar paraules o frases dins de les variables. 
    No té cap operació associada, però sí que es pot utilizar operadors de comparació per veure si dos strings son iguals o no.
    Els literals van associats com entre cometes dobles:
    
5.- CONVERSIONS ENTRE DADES

    Transpa:                integer         real                boolean             char                string 
                integer     --------------  i:=realToInt(r)     i := kronecker(b);  i := charToInt(c)   xxxxxxxxxxxxxx
                real        r:=intToReal(r) --------------      r := intToReal(kr(i)) r:=iTor(cToI(c))  xxxxxxxxxxxxxx
                boolean     b:=i!=0;        b:=rToi(r)!=0;      --------------
                char                                                                --------------
                string                                                                                  --------------
 
    Per poder passar d'un tipus a un altre, podem fer servir aquestes expressions. 
    En alguns pseudocodis es permet la conversió "automàtica", entre operadors:  r: real;     r := 1.0 * i;
                                                                                              r := 1.0 * intToReal(i);

 
5.- ENTRADES I SORTIDES

    Transpa:        var                    var                var                   var               var 
                        x: integer;             x: real;          x: boolean;           x: char           x: string; 
                    endvar                 endvar             endvar                endvar            endvar 
                                                                                                      
                    x := readInteger();    x := readReal();   x := readBoolean();   x := readChar();  x := readString();
                    writeInteger(x);       writeReal(x);      writeBoolean(x);      writeChar(x);     writeString(x);
    
    Per poder entrar valors des del teclat usarem el procediment readInteger, readReal, readBoolean, readChar i readString.
    En canvi, per poder escriure per pantalla haurem d'usar writeInteger, writeReal, writeBoolean, writeChar i writeString.
    
    
6.- PRIMERS PROGRAMES:

    * Calcula la teva edat: 
        Transpa:    Calculates the age of a person based on the current year and the date of birth
        
        Escriure:   algorithm currentAge
                    (* author: lsic@bloadcas.com
                       date: 2023-02-02
                       description: Calculates the age of a person based on the current year and the date of birth
                    *)
                    
                    { This algorithm uses the simple data types and no need to declare its own }
                    
                        var 
                            year_current : integer;
                            year_birth : integer;
                            age : integer;
                        endvar
                    
                        { get the current and birthday from the input }
                        year_current := readInteger();
                        year_birth := readInteger();
                        
                        { the age is the difference between the two years }
                        age := year_current - year_birth;
                        
                        { Print the age }
                        writeInteger(age);   

                        { Q: The age between the two years has been printed }
                        
                    endalgorithm
    
    * Calcula la taula de multiplicació: 
        Transpa:    Create the simple table of multiplication from a desired value.
        
        Escriure:   algorithm currentAge
                    (* author: lsic@bloadcas.com
                       date: 2023-02-02
                       description:  Create the simple table of multiplication from a desired value.
                    *)
                   
                        var 
                            value : integer;
                        endvar
                    
                        { get the value the input }
                        value := readInteger();
                        
                        { write all the multiplications to the output }
                        writeInteger( 1 * value );
                        writeInteger( 2 * value );
                        writeInteger( 3 * value );
                        writeInteger( 4 * value );
                        writeInteger( 5 * value );
                        writeInteger( 6 * value );
                        writeInteger( 7 * value );
                        writeInteger( 8 * value );
                        writeInteger( 9 * value );
                        writeInteger( 10 * value );
                        
                        { Q: The table of multiplication for the value is printed }
                        
                    endalgorithm
    
    * Calcula la divisió entre dos nombres: 
        Transpa:    Calculate the division of two numbers. 
                    Assume they are non-zero positive numbers.
        
        Escriure:   algorithm divisionOf2Numbers
                    (* author: lsic@bloadcas.com
                       date: 2023-02-02
                       description:  Calculate the division of two non-zero positive numbers. 
                    *)
                   
                        var 
                            x, y, division : real;
                        endvar
                    
                        { get the value the input }
                        x := readReal();
                        y := readReal();
                        
                        { P: x > 0 ^ y > 0 }
                        division := x / y;
                        { Q: division = x / y ^ x > 0 ^ y > 0 ^ division > 0 }
                        
                        { Print the result }
                        writeReal(division );
                        
                    endalgorithm
    
    * Calcula l'àrea d'una circumferència
        Transpa:    Calculate the area of a circle of radius R: A = Pi * R^2
        
        Escriure:   algorithm currentAge
                    (* author: lsic@bloadcas.com
                       date: 2023-02-02
                       description:  Calculate the area of a circle or radius R.
                    *)
                    const 
                        PI : real = 3.14159265359;
                    endconst
                        var 
                            radius, area : real;
                        endvar
                    
                        { get the value the radius }
                        radius := readReal();
                        
                        { Calculate the area with the found parameters}
                        area := PI * radius * radius;
                        writeReal(area);
                        { Q: area = PI * radius * radius }
                        
                    endalgorithm
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    