GUIÓ DEL INITIATION TO PROGRAMMING

00. PRESENTATION

1.- PRESENTACIÓ
    Transpa:    Diagrama d'immersions simplificat
    
    Benvinguts en aquest curs d'iniciació a la programació on aprendrem les bases teòriques de la programació de manera gradual.
    De fet, el curs està dividit diferents immersions tal com si fos un curs d'aprendre a nedar. Cada immersió serà a major profunditat en la programació i,
	per tant, el contingut serà cada cop més complex.
    Se n'ha pensat unes 6 immersions que correspondran a cada capítol d'aquest curs.
		la simple, bàsica, procedimental, arrays, punters i la de tipus de dades. 
    A més, un cop s'explica el contingut d'una base, ja es disposarà del coneixement suficient per dur a terme les més avançades:
		En les que inclourem l'especificació d'algorismes, 
		el disseny descendent de codi
		la recursivitat
		el càlcul de costos assimptòtics.
    Però això ho explicarem més endavant i en més detall en cada capítol.
    
2.- DEFINITION
    Transpa:    Def(Programming) := noun, the process or activity of writing computer programs.
                BetterDef(Programming) := Programming is the art of telling a machine what to do and how to do it in its language.
                
    Abans de començar amb tot el contingut cal saber què és programar. 
    Una definició de diccionari seria una com aquesta: "procés o activitat en la qual s'escriuen programes pels ordinadors".
    Aquest tipus de definició deixen a tothom sense una idea clara de que és programar.
    Per això, prefereixo una de millor: és l'art de dir a una màquina el què ha de fer i com ho ha de fer en el seu llenguatge.
    És a dir, la nostra missió és explicar en un llenguatge concret quines accions s'han de dur a terme
    ... per tal que una màquina les entengui i les sàpiga fer.
    Per això aquest tipus de programació s'anomena programació imperativa, perquè es donen ordres a les màquines perquè actuin per donar resposta a un problema.
    
3.- MODEL COMPUTACIONAL

    Transpa:    algorithm -> pseudocode -----------> model of computation
                program ---> programming language -> computer

                An algorithm is defined as an unambiguous and precise description of the actions to be taken to solve a well-defined problem in a finite time.

    Si hem de programar per a una màquina ens trobem que hi ha una infinitat de llenguatges: C, C++, C#, Java, Python, JavaScript, PHP, Swift, Go, Ruby,...
    Per això, en aquest curs no usarem cap d'ells i ens centrarem en la part més teoria de la programació: l'algorismica.
    L'algorismica és la branca de la informàtica que estudia els algorismes, ...
    ... que són una descripció en forma d'instruccions precises que cal seguir per resoldre un problema en un curt temps.
    Per fer-ho, usarem el pseudcodi, un llenguatge abstracte el qual no és cap dels anteriorment descrits. 
    Per tant, no s'executaran sobre un ordinador, sino que ho farem sobre un model de computació, és a dir en una màquina imaginaria de potència il·limitada.
    El que correspondria a la idea perfecta de computadora, el millor model abstracte.
	
	La idea final que ens ha de quedar clar és que escriurem algorismes en un pseudocodi per a una màquina genèrica. Per tant, aquest pseudoci el traduim a un llenguatge de programació, m'obtindrem un programa que podrà ser executar en determinades computadores.
    
    Transpa:    [MEMORY] <-> [CPU] <-> [INOUT] --> SCREEN
                                               <-- KEYBOARD.
                                               
    El model de computadora que farem servir està composada d'una memòria, una CPU i una gestió de la seva sortida: el teclat i la pantalla.
    La memòria hi guardarem les dades i la considerarem il·limitada.
    La CPU és el centre de processament i càlcul el qual interpretarà el nostre codi.
    L'entrada i sortida, serà la interacció del programa amb l'exterior, l'usuari 
    Podrà escriure dades per pantalla i rebre entrades introduides amb el teclat.
    
    
    Transpa:    algorithm -> pseudocode -----------> model of computation
                                |
                               \./   implementation.
                program ---> programming language -> computer

    Un cop tenim un algorisme escrit en un pseudocodi capaç de ser processat en una computadora abstracta,
    podem escriure el mateix codi en qualssevol dels llenguatges de programació que una computadora és capaç d'interpretar.
    Aquest procés s'anomena implementació.
    
4.- TEORIA DE CAIXES

    Transpa:    input -> [ box ] -> output.

    És hora d'introduir el concepte de teoria de caixes.
    En informàtica, molts dels processos i conceptes que explicarem més endavant simbolitzen la transformació d'unes entrades en unes sortides.
    I aquest transformació s'aplica a qualssevol idea. Per exemple:
    
    Transpa:    pseudocode -> [ implementation ] -> code in C (programming language)
                data + algorithm -> [ execute algorithm ] -> calculations
                keys + door -> [ unlock door   ] -> opened door.
                ingredients + receipe  -> [ cook ingredients ] -> menu
                signals -> [ electronic board ] -> control lights
                
    * La implementació d'un pseudocodi d'un algorisme el transforma en un codi d'un determinat llenguatge (c)
    * L'execució d'un programa el qual rep unes dades i n'obtenim uns càlculs.
    * El procès d'obrir una porta permet que unes claus inserides en una determinada porta, la pugui obrir.
    * El procès de cuinar permet processar uns ingredients usant una recepta, per crear un menú.
    * L'execució d'un component electrònic transforma les senyals d'entrada per controlar les llums d'un semàfor.
    
    Hem que retenir aquesta idea de processament d'unes dades d'entrada per transformar-les en unes altres de sortida.
    Serà un concepte que repetirem molts cops. De fet, ja ha sortit en pantalles anteriors.
    
5.- IMMERSIONS

    Transpa:    SIMPLE: tipus dades, variables, assignació i i/o
                BASIC: sequencial, condicional i iterativa (repetitiva).
                PROCEDURAL: actions, functions, calling, recursivity
                ARRAYS: vectors, matrix
                POINTERS: pointers,
                TADs: user defined, stack, queue, list. 
    
    De primer, començarem a explicar les dades que un algorisme pot manipular. 
    Es manipulen amb variables que li donarem valor i les mostrarem al usuari.
    
    De segon, explicarem les bases de la programació amb les estructures més importants.
    
    De tercer, començarem a fragmentar el nostre codi per tal de crear petits moduls o procediments 
    ... que podran ser executats quan es vulgui.
    
    De quart, s'explicarà com emmagatzemar llistes com a informació a la memòria. Els arrays son un recurs molt usat i necessaris.
    
    De cinquè, s'introdueix el concepte de memòria dinàmica. Ara emmagatzemarem dades amb el mínim d'espai de memoria necessari.
    
    Finalment, de sisè, introduirem els tipus de dades abstractes que ajuden a gestionar col·leccions de dades.
    
    També s'aprofundirà en temes com:
        * esquemes algorismics: recorreguts i ceques.
        * ordenació de dades
        * disseny descendent
        i anàlisi de costos asimptòtics.
    
    Amb aquest sis grups i els satèl·lits ja serem capaços de crear algorismes que resolguin molts problemes.
    En un curs avançat ja es tractarà el concepte de base de dades, accès al sistema d'arxius i conexions a serveis, per exemple.

